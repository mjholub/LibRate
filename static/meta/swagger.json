{
    "swagger": "2.0",
    "info": {
        "description": "API for LibRate, a social media cataloguing and reviewing service",
        "title": "LibRate",
        "contact": {
            "name": "MJH",
            "email": "TODO@flagship.instance"
        },
        "license": {
            "name": "GNU Affero General Public License v3",
            "url": "https://www.gnu.org/licenses/agpl-3.0.html"
        },
        "version": "dev"
    },
    "basePath": "/api",
    "paths": {
        "/artists/by-name": {
            "post": {
                "description": "Retrieve the artists with the given names",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "artists",
                    "bulk operations"
                ],
                "summary": "Retrieve artists",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Artist names",
                        "name": "names",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/media.GroupedArtists"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/authenticate/delete-account": {
            "post": {
                "description": "Delete the account of the currently logged in user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth",
                    "accounts",
                    "deleting",
                    "settings"
                ],
                "summary": "Delete account",
                "parameters": [
                    {
                        "description": "The password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Confirmation of the password",
                        "name": "confirmation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "type": "string",
                        "description": "CSRF protection token",
                        "name": "X-CSRF-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/authenticate/login": {
            "post": {
                "description": "Create a session for the user",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth",
                    "accounts"
                ],
                "summary": "Login to the application",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Member name. Request must include either membername or email",
                        "name": "membername",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Email address",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "default": 30,
                        "description": "Session time in minutes",
                        "name": "session_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Referrer-Policy header",
                        "name": "Referrer-Policy",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "X-CSRF-Token header",
                        "name": "X-CSRF-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.SessionResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/authenticate/password": {
            "patch": {
                "description": "Change the password for the currently logged in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth",
                    "accounts",
                    "updating",
                    "settings"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "The old password",
                        "name": "old",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The new password",
                        "name": "new",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "type": "string",
                        "description": "CSRF protection token",
                        "name": "X-CSRF-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/genre/{kind}/{genre}": {
            "get": {
                "description": "Retrieve the genre with the given name and type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "genres"
                ],
                "summary": "Retrieve genre",
                "parameters": [
                    {
                        "enum": [
                            "film",
                            "tv",
                            "music",
                            "book",
                            "game"
                        ],
                        "type": "string",
                        "description": "Genre kind",
                        "name": "kind",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Genre name (snake_lowercase)",
                        "name": "genre",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "en",
                            "de"
                        ],
                        "type": "string",
                        "description": "ISO-639-1 language code",
                        "name": "lang",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/media.Genre"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/genres/{kind}": {
            "get": {
                "description": "Retrieve the list of genres of the specified type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "genres",
                    "bulk operations"
                ],
                "summary": "Retrieve genres",
                "parameters": [
                    {
                        "enum": [
                            "film",
                            "tv",
                            "music",
                            "book",
                            "game"
                        ],
                        "type": "string",
                        "description": "Genre kind",
                        "name": "kind",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Return only genre names. Usually used for populating dropdowns",
                        "name": "names_only",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Return the genre names as links",
                        "name": "as_links",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Return all genres, not only the ones without a parent genre (e.g. Twee Pop and Jangle Pop instead of just Pop)",
                        "name": "all",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "name",
                                "id",
                                "kinds",
                                "parent",
                                "children"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Return only the specified columns",
                        "name": "columns",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "If names_only=false and as_links=false",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/media.Genre"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/media/{id}": {
            "get": {
                "description": "Retrieve complete media information for the given media ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "metadata"
                ],
                "summary": "Retrieve media information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Media UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/media/{media_id}/cast": {
            "get": {
                "description": "Get the full cast and crew involved with the creation of the media with given ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media",
                    "artists",
                    "bulk operations",
                    "films",
                    "television",
                    "anime"
                ],
                "summary": "Get the cast of the media with given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The UUID of the media to get the cast of",
                        "name": "media_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/media.Cast"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/media/{media_id}/images": {
            "get": {
                "description": "Retrieve the image paths for the media with the given ID",
                "consumes": [
                    "json text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "media",
                    "metadata",
                    "images"
                ],
                "summary": "Retrieve image paths",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Media UUID",
                        "name": "media_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media UUID",
                        "name": "media_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/members/export/{format}": {
            "get": {
                "description": "Exports the data of a member, including profile information as well as other related data such as reviews",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "json text/csv"
                ],
                "tags": [
                    "accounts",
                    "members",
                    "metadata"
                ],
                "summary": "Export all of the member's data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "enum": [
                            "json",
                            "csv"
                        ],
                        "type": "string",
                        "description": "Export format",
                        "name": "format",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/members/follow": {
            "post": {
                "description": "Send a follow request to another user. If the user has automatic follow request acceptance\nenabled, the follow request will be accepted immediately.",
                "consumes": [
                    "application/json"
                ],
                "summary": "Send a follow request to a member (user)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The requester's JWT. Contains encrypted claims to the webfinger",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The webfinger of the member to follow",
                        "name": "followee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Receive notifications for all content created by the followee",
                        "name": "notify",
                        "in": "body",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Show this account's reblogs in home timeline",
                        "name": "reblogs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/member.FollowResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "When the followee is already followed",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "403": {
                        "description": "When at least one party blocks the other",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "description": "Unfollow a member or remove follower",
                "consumes": [
                    "application/json"
                ],
                "summary": "Unfollow a member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The follower's JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The webfinger of the member to unfollow",
                        "name": "target",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/members/follow/requests": {
            "get": {
                "description": "Get own received follow requests or sent follow requests",
                "consumes": [
                    "application/json"
                ],
                "summary": "Get follow requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The JWT of the member. Contains encrypted claims to webfinger",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "enum": [
                            "sent",
                            "received",
                            "all"
                        ],
                        "type": "string",
                        "description": "Which follow requests should be looked up",
                        "name": "type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/members/follow/requests/in/{id}": {
            "put": {
                "description": "Accept a follow request",
                "consumes": [
                    "application/json"
                ],
                "summary": "Accept a follow request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The accepter's JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The ID of the follow request",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "description": "Reject a follow request",
                "consumes": [
                    "application/json"
                ],
                "summary": "Reject a follow request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The rejecter's JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The webfinger of the member who requested to follow",
                        "name": "follower",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the follow request",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/members/follow/requests/out/{id}": {
            "delete": {
                "description": "Cancel a sent follow request if it's pending",
                "consumes": [
                    "application/json"
                ],
                "summary": "Cancel a follow request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The requester's JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The CSRF token",
                        "name": "X-CSRF-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the follow request",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/members/follow/status/{followee_webfinger}": {
            "get": {
                "description": "Check if a member is followed by the request initiator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Check if a member is followed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The follower's JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The webfinger of the member to check",
                        "name": "followee_webfinger",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/member.FollowResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/members/{email_or_username}/info": {
            "get": {
                "description": "Retrieve the information the requester is allowed to see about a member",
                "consumes": [
                    "json application/activity+json"
                ],
                "tags": [
                    "accounts",
                    "interactions",
                    "metadata"
                ],
                "summary": "Get a member (user) by nickname or email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The nickname or email of the member to get",
                        "name": "email_or_username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/member.Member"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "When certain access prerequisites are not met, e.g. a follower's only-visible metadata is requested",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/members/{uuid}/ban": {
            "post": {
                "description": "issues a ban to a user with the given UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "members",
                    "accounts",
                    "administration"
                ],
                "summary": "Ban user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the member to ban",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Ban details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/member.BanInput"
                        }
                    },
                    {
                        "type": "string",
                        "description": "X-CSRF-Token header",
                        "name": "X-CSRF-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "description": "removes a ban from a user with the given UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "members",
                    "accounts",
                    "administration"
                ],
                "summary": "Unban user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the member to unban",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "X-CSRF-Token header",
                        "name": "X-CSRF-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "202": {
                        "description": "When ",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "description": "Search for media, users, posts, artists, etc.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "search",
                    "media",
                    "metadata",
                    "users",
                    "posts",
                    "reviews"
                ],
                "summary": "Perform a search for the given query and options",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CSRF token. Required when using POST.",
                        "name": "X-CSRF-Token",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "The search query. Falls back to a wildcard query if not provided.",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "union",
                            "users",
                            "groups",
                            "artists",
                            "media",
                            "posts",
                            "reviews",
                            "tags",
                            "genres"
                        ],
                        "type": "string",
                        "description": "The category to search in",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The aggregations to perform on the search results",
                        "name": "aggregations",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to perform a fuzzy search",
                        "name": "fuzzy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "score",
                            "added",
                            "modified",
                            "weighed_score",
                            "review_count"
                        ],
                        "type": "string",
                        "description": "The field to sort the results by",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to sort the results in descending order",
                        "name": "desc",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The page to return",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The number of results to return per page",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {}
            },
            "post": {
                "description": "Search for media, users, posts, artists, etc.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "search",
                    "media",
                    "metadata",
                    "users",
                    "posts",
                    "reviews"
                ],
                "summary": "Perform a search for the given query and options",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CSRF token. Required when using POST.",
                        "name": "X-CSRF-Token",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "The search query. Falls back to a wildcard query if not provided.",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "union",
                            "users",
                            "groups",
                            "artists",
                            "media",
                            "posts",
                            "reviews",
                            "tags",
                            "genres"
                        ],
                        "type": "string",
                        "description": "The category to search in",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The aggregations to perform on the search results",
                        "name": "aggregations",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to perform a fuzzy search",
                        "name": "fuzzy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "score",
                            "added",
                            "modified",
                            "weighed_score",
                            "review_count"
                        ],
                        "type": "string",
                        "description": "The field to sort the results by",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to sort the results in descending order",
                        "name": "desc",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The page to return",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The number of results to return per page",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/update/{member_name}": {
            "patch": {
                "description": "Handle updating those member properties that can be exposed publicly, i.e. not settings",
                "consumes": [
                    "multipart/form-data json"
                ],
                "tags": [
                    "accounts",
                    "metadata",
                    "updating"
                ],
                "summary": "Update member information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The nickname of the member being updated",
                        "name": "member_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The JWT token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CSRF token",
                        "name": "X-CSRF-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the picture that is returned after making a request to /api/upload/image",
                        "name": "profile_pic_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/update/{member_name}/preferences": {
            "patch": {
                "description": "Handle updating private member preferences",
                "consumes": [
                    "json multipart/form-data"
                ],
                "tags": [
                    "accounts",
                    "updating",
                    "settings"
                ],
                "summary": "Update member preferences",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The nickname of the member being updated",
                        "name": "member_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The JWT token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CSRF token",
                        "name": "X-CSRF-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ISO 639-1 locale to use",
                        "name": "locale",
                        "in": "formData"
                    },
                    {
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer",
                        "description": "The lower bound of the rating scale",
                        "name": "rating_scale_lower",
                        "in": "formData"
                    },
                    {
                        "maximum": 100,
                        "minimum": 2,
                        "type": "integer",
                        "description": "The upper bound of the rating scale",
                        "name": "rating_scale_upper",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "A comma-separated list of words to autohide in messages",
                        "name": "message_autohide_words",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "A comma-separated list of instance domains to mute",
                        "name": "muted_instances",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to automatically accept follow requests",
                        "name": "auto_accept_follow",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to allow local searches",
                        "name": "locally_searchable",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to allow federated searches",
                        "name": "federated_searchable",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to allow robots to index the profile",
                        "name": "robots_searchable",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.SessionResponse": {
            "type": "object",
            "properties": {
                "membername": {
                    "type": "string",
                    "example": "lain"
                },
                "token": {
                    "type": "string",
                    "example": "[A-Za-z0-9]{37}.[A-Za-z0-9]{147}.L-[A-Za-z0-9]{24}_[A-Za-z0-9]{25}-zNjCwGMr-[A-Za-z0-9]{27}"
                }
            }
        },
        "handlers.ResponseHTTP": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "media.Cast": {
            "type": "object",
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "actors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/media.Person"
                    }
                },
                "directors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/media.Person"
                    }
                }
            }
        },
        "media.Genre": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/media.GenreDescription"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "keywords": {
                    "description": "DescLong    string   `json:\"desc_long\" db:\"desc_long\"`",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['dark'",
                        " 'gloomy'",
                        " 'atmospheric'",
                        " 'raw'",
                        " 'underproduced']"
                    ]
                },
                "kind": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "music"
                    ]
                },
                "name": {
                    "type": "string",
                    "example": "Black Metal"
                },
                "parent_genre": {
                    "type": "integer"
                }
            }
        },
        "media.GenreDescription": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Typified by highly distorted, trebly, tremolo-picked guitars, blast beats, double kick drumming, shrieked vocals, and raw, underproduced sound that often favors atmosphere over technical skills and melody."
                },
                "genre_id": {
                    "type": "integer",
                    "example": 2958
                },
                "language": {
                    "type": "string",
                    "example": "en"
                }
            }
        },
        "media.Group": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "added": {
                    "type": "string"
                },
                "bandcamp": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "disbanded": {
                    "type": "string"
                },
                "formed": {
                    "type": "string"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/media.Genre"
                    }
                },
                "id": {
                    "type": "string"
                },
                "kind": {
                    "description": "Orchestra, Choir, Ensemble, Collective, etc.",
                    "type": "string"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/places.Place"
                    }
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/media.Person"
                    }
                },
                "modified": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "photos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "primary_genre": {
                    "$ref": "#/definitions/media.Genre"
                },
                "soundcloud": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                },
                "wikipedia": {
                    "type": "string"
                },
                "works": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "media.GroupedArtists": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/media.Group"
                    }
                },
                "individual": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/media.Person"
                    }
                }
            }
        },
        "media.Person": {
            "type": "object",
            "properties": {
                "added": {
                    "type": "string"
                },
                "bio": {
                    "type": "string",
                    "example": "wojtyła disco dance"
                },
                "birth": {
                    "description": "DOB can also be unknown",
                    "type": "string"
                },
                "death": {
                    "type": "string",
                    "example": "2005-04-02T21:37:00Z"
                },
                "first_name": {
                    "type": "string",
                    "example": "Karol"
                },
                "hometown": {
                    "$ref": "#/definitions/places.Place"
                },
                "id": {
                    "type": "string",
                    "example": "12345678-90ab-cdef-9876-543210fedcba"
                },
                "last_name": {
                    "type": "string",
                    "example": "Wojtyła"
                },
                "modified": {
                    "type": "string"
                },
                "name": {
                    "description": "helper field for complete name",
                    "type": "string"
                },
                "nick_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['pawlacz'",
                        " 'jan pawulon']"
                    ]
                },
                "other_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['Jan Paweł II']"
                    ]
                },
                "photos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "residence": {
                    "$ref": "#/definitions/places.Place"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "website": {
                    "type": "string",
                    "example": "https://www.vatican.va/content/john-paul-ii/en.html"
                },
                "works": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "member.BanInput": {
            "type": "object"
        },
        "member.FollowResponse": {
            "type": "object",
            "properties": {
                "acceptTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "notify": {
                    "type": "boolean"
                },
                "reblogs": {
                    "type": "boolean"
                },
                "status": {
                    "description": "when checking status, we treat not_found as not following\nbut when creating a request, we treat not_found as target account not existing",
                    "type": "string"
                }
            }
        },
        "member.Member": {
            "type": "object",
            "required": [
                "email",
                "memberName",
                "webfinger"
            ],
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "bio": {
                    "type": "string",
                    "example": "Wherever you go, everyone is connected."
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": true
                },
                "displayName": {
                    "type": "string",
                    "example": "Lain Iwakura"
                },
                "email": {
                    "type": "string",
                    "example": "lain@wired.jp"
                },
                "followers_uri": {
                    "description": "URI for getting the followers list of this account",
                    "type": "string"
                },
                "following_uri": {
                    "description": "URI for getting the following list of this account",
                    "type": "string"
                },
                "memberName": {
                    "description": "MemberName != webfinger",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3,
                    "example": "lain"
                },
                "profile_pic": {
                    "type": "string",
                    "example": "/static/img/profile/lain.jpg"
                },
                "publicKeyPem": {
                    "type": "string"
                },
                "regdate": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"admin\"",
                        " \"moderator\"]"
                    ]
                },
                "uuid": {
                    "type": "string"
                },
                "visibility": {
                    "type": "string",
                    "example": "followers_only"
                },
                "webfinger": {
                    "description": "email like",
                    "type": "string",
                    "example": "lain@librate.club"
                }
            }
        },
        "places.Country": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "places.Place": {
            "type": "object",
            "properties": {
                "country": {
                    "$ref": "#/definitions/places.Country"
                },
                "id": {
                    "type": "integer"
                },
                "kind": {
                    "type": "string"
                },
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}