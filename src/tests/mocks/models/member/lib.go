// Code generated by MockGen. DO NOT EDIT.
// Source: models/member/lib.go
//
// Generated by this command:
//
//	mockgen -source models/member/lib.go -destination tests/mocks/models/member/lib.go
//
// Package mock_member is a generated GoMock package.
package mock_member

import (
	context "context"
	reflect "reflect"

	member "codeberg.org/mjh/LibRate/models/member"
	v5 "github.com/gofrs/uuid/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockMemberStorer is a mock of MemberStorer interface.
type MockMemberStorer struct {
	ctrl     *gomock.Controller
	recorder *MockMemberStorerMockRecorder
}

// MockMemberStorerMockRecorder is the mock recorder for MockMemberStorer.
type MockMemberStorerMockRecorder struct {
	mock *MockMemberStorer
}

// NewMockMemberStorer creates a new mock instance.
func NewMockMemberStorer(ctrl *gomock.Controller) *MockMemberStorer {
	mock := &MockMemberStorer{ctrl: ctrl}
	mock.recorder = &MockMemberStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberStorer) EXPECT() *MockMemberStorerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockMemberStorer) Check(ctx context.Context, email, nickname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, email, nickname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockMemberStorerMockRecorder) Check(ctx, email, nickname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockMemberStorer)(nil).Check), ctx, email, nickname)
}

// CreateSession mocks base method.
func (m *MockMemberStorer) CreateSession(ctx context.Context, member *member.Member) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, member)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockMemberStorerMockRecorder) CreateSession(ctx, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockMemberStorer)(nil).CreateSession), ctx, member)
}

// Delete mocks base method.
func (m *MockMemberStorer) Delete(ctx context.Context, member *member.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMemberStorerMockRecorder) Delete(ctx, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMemberStorer)(nil).Delete), ctx, member)
}

// GetID mocks base method.
func (m *MockMemberStorer) GetID(ctx context.Context, key string) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID", ctx, key)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetID indicates an expected call of GetID.
func (mr *MockMemberStorerMockRecorder) GetID(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockMemberStorer)(nil).GetID), ctx, key)
}

// GetPassHash mocks base method.
func (m *MockMemberStorer) GetPassHash(email, login string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassHash", email, login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassHash indicates an expected call of GetPassHash.
func (mr *MockMemberStorerMockRecorder) GetPassHash(email, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassHash", reflect.TypeOf((*MockMemberStorer)(nil).GetPassHash), email, login)
}

// GetSessionTimeout mocks base method.
func (m *MockMemberStorer) GetSessionTimeout(ctx context.Context, memberID int, deviceID v5.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionTimeout", ctx, memberID, deviceID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionTimeout indicates an expected call of GetSessionTimeout.
func (mr *MockMemberStorerMockRecorder) GetSessionTimeout(ctx, memberID, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionTimeout", reflect.TypeOf((*MockMemberStorer)(nil).GetSessionTimeout), ctx, memberID, deviceID)
}

// LookupDevice mocks base method.
func (m *MockMemberStorer) LookupDevice(ctx context.Context, deviceID v5.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupDevice", ctx, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LookupDevice indicates an expected call of LookupDevice.
func (mr *MockMemberStorerMockRecorder) LookupDevice(ctx, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupDevice", reflect.TypeOf((*MockMemberStorer)(nil).LookupDevice), ctx, deviceID)
}

// Read mocks base method.
func (m *MockMemberStorer) Read(ctx context.Context, key string, keyNames ...string) (*member.Member, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range keyNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*member.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockMemberStorerMockRecorder) Read(ctx, key any, keyNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, keyNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMemberStorer)(nil).Read), varargs...)
}

// RequestFollow mocks base method.
func (m *MockMemberStorer) RequestFollow(ctx context.Context, fr *member.FollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestFollow", ctx, fr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestFollow indicates an expected call of RequestFollow.
func (mr *MockMemberStorerMockRecorder) RequestFollow(ctx, fr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestFollow", reflect.TypeOf((*MockMemberStorer)(nil).RequestFollow), ctx, fr)
}

// Save mocks base method.
func (m *MockMemberStorer) Save(ctx context.Context, member *member.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMemberStorerMockRecorder) Save(ctx, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMemberStorer)(nil).Save), ctx, member)
}

// Update mocks base method.
func (m *MockMemberStorer) Update(ctx context.Context, member *member.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMemberStorerMockRecorder) Update(ctx, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMemberStorer)(nil).Update), ctx, member)
}
